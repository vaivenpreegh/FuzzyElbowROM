import streamlit as st
import numpy as np
import skfuzzy as fuzz
from matplotlib.ticker import MultipleLocator
from skfuzzy import control as ctrl
import matplotlib.pyplot as plt
import os

#import scipy

#from flask import Flask, request, render_template, url_for

#app = Flask(__name__)

#app.config['EXPLAIN_TEMPLATE_LOADING'] = True

st.set_page_config(page_title="Sidebar Elbow Strength Analyzer App", layout="wide")

st.title("ðŸ“ˆ Elbow Strength Analyzer Demo")
st.write("Use the sidebar to input Active Range of Motion values of the Arm!")

st.sidebar.header("Analyzer Controls")


flexion = ctrl.Antecedent(np.arange(69,180,1),'Elbow Flexion')
extension = ctrl.Antecedent(np.arange(-5,8,1),'Elbow Extension')
wextension = ctrl.Antecedent(np.arange(20,75,1),'Wrist Extension')
pronation = ctrl.Antecedent(np.arange(30, 100, 1), 'Elbow Pronation')
supination = ctrl.Antecedent(np.arange(0, 100, 1), 'Elbow Supination')
elbowHealth = ctrl.Consequent(np.arange(0,15,1),'Elbow AROM Assessment')


fHypomobility = fuzz.trimf(flexion.universe,[69,100,143])
fNormal = fuzz.trapmf(flexion.universe,[130,143,149,160])
fHypermobility = fuzz.trimf(flexion.universe,[149,170,180])

#membership functions for flexion
flexion['Hypomobility'] = fuzz.trimf(flexion.universe,[69,100,143])
flexion['Normal'] = fuzz.trapmf(flexion.universe,[130,143,149,160])
flexion['Hypermobility'] = fuzz.trimf(flexion.universe,[149,170,180])


#membership functions for extension
eHypomobility = fuzz.trimf(extension.universe,[-5,-2,0])
eNormal        = fuzz.trapmf(extension.universe,[-2,0,1,3])
eHypermobility = fuzz.trimf(extension.universe,[2,5,8])

extension['Hypomobility']  = fuzz.trimf(extension.universe,[-5,-2,0])
extension['Normal']        = fuzz.trapmf(extension.universe,[-2,0,1,3])
extension['Hypermobility'] = fuzz.trimf(extension.universe,[2,5,8])



#membership functions for Wrist Extension
weHypomobility  = fuzz.trimf(wextension.universe,[20,35,50])
weNormal        = fuzz.trapmf(wextension.universe,[40,50,60,70])
weHypermobility = fuzz.trimf(wextension.universe,[60, 73, 75])

wextension['Hypomobility']  = fuzz.trimf(wextension.universe,[20,35,50])
wextension['Normal']  = fuzz.trapmf(wextension.universe,[40,50,60,70])
wextension['Hypermobility'] = fuzz.trimf(wextension.universe,[60, 73, 75])

# Define triangular membership functions for pronation
pronation['Hypomobility'] = fuzz.trimf(pronation.universe, [30, 30, 78])
pronation['Normal'] = fuzz.trapmf(pronation.universe, [68, 78, 84, 94])
pronation['Hypermobility'] = fuzz.trimf(pronation.universe, [84, 90, 100])

pPoor = fuzz.trimf(pronation.universe, [30, 30, 78])
pAverage = fuzz.trapmf(pronation.universe, [68, 78,84, 94])
pGood = fuzz.trimf(pronation.universe, [84, 90, 100])


# Define triangular membership functions for supination
supination['Hypomobility'] = fuzz.trimf(supination.universe, [0, 0, 85])
supination['Normal'] = fuzz.trapmf(supination.universe, [80, 85, 89, 94])
supination['Hypermobility'] = fuzz.trimf(supination.universe, [89, 95, 100])

sPoor = fuzz.trimf(supination.universe, [0, 0, 85])
sAverage = fuzz.trapmf(supination.universe, [80, 85,89, 94])
sGood = fuzz.trimf(supination.universe, [89, 95, 100])


elbowHealth['Very Limited']= fuzz.trimf(elbowHealth.universe,[0,2,4])
elbowHealth['Limited']= fuzz.trimf(elbowHealth.universe,[4,6,8])
elbowHealth['Normal']= fuzz.trimf(elbowHealth.universe,[8,10,12])

#fuzzylogic inference rule

rule1=ctrl.Rule(flexion['Hypomobility'],elbowHealth['Very Limited'])
rule2=ctrl.Rule(wextension['Hypomobility'],elbowHealth['Very Limited'])
rule3=ctrl.Rule(flexion['Normal'] &   ( (extension['Hypomobility']) | (extension['Hypermobility'])) , elbowHealth['Very Limited'] )
rule4=ctrl.Rule((flexion['Hypomobility'] | flexion['Hypermobility']) & (extension['Hypomobility'] | extension['Hypermobility']),elbowHealth['Very Limited'])
rule5=ctrl.Rule(flexion['Normal'] & wextension['Normal'] & ((pronation['Hypomobility']) | (pronation['Hypermobility'])),elbowHealth['Limited'])
rule6=ctrl.Rule(flexion['Normal'] & wextension['Normal'] & ((supination['Hypomobility']) | (supination['Hypermobility'])),elbowHealth['Limited'])
rule7=ctrl.Rule(flexion['Normal'] & extension['Normal'] & wextension['Normal'] & pronation['Normal'] & ( supination['Normal'] | supination['Hypomobility']),elbowHealth['Normal'])


# Create the control system
simulctrl = ctrl.ControlSystem([rule1,rule2,rule3,rule4,rule5,rule6,rule7])
simulation = ctrl.ControlSystemSimulation(simulctrl)

#@app.route('/')
#@app.route('/register')
#def homepage():
   #return 'home page'
 #  return render_template('index.html')

#@app.route('/calculate', methods=['POST'])
def calculate():
#    flexionVal = float(request.form['flexion'])
#    extensionVal = float(request.form['extension'])
#    pronationVal = float(request.form['pronation'])
#    supinationVal = float(request.form['supination'])
#    wextensionVal = float(request.form['wextension'])
#    painlevel     = request.form['painlevel']


  flexionVal = st.sidebar.slider("Flexion", 69,180,140)
  extensionVal = st.sidebar.slider("Flexion", 69,180,140)
  pronationVal = st.sidebar.slider("Flexion", 69,180,140)
  supinationVal = st.sidebar.slider("Flexion", 69,180,140)
  wextensionVal = st.sidebar.slider("Flexion", 69,180,140)
  painlevel     = st.sidebar.selectbox(
     "Select pain level:",
     options=["None", "Low", "Moderate", "Severe"] )


  simulation.input['Elbow Flexion'] = flexionVal
  simulation.input['Elbow Extension'] = extensionVal
  simulation.input['Elbow Pronation'] = pronationVal
  simulation.input['Elbow Supination'] = supinationVal
  simulation.input['Wrist Extension'] = wextensionVal

  simulation.compute()

  output_value = round(simulation.output['Elbow AROM Assessment'],2)
  #output_value = "success"



  elbowStrength = "None"
  if painlevel in ('Severe'):
     elbowStrength = 'Weak'
  elif ((output_value >= 0 and output_value <= 4)):
       elbowStrength = 'Weak'
  elif ((output_value >= 4 and output_value <= 8)) and painlevel in ('Moderate','None'):
      elbowStrength = 'Average'
  elif ((output_value >= 4 and output_value <= 8)) and painlevel in ('Severe'):
       elbowStrength = 'Weak'
  elif ((output_value >= 8 and output_value <= 12)) and painlevel in ('Moderate', 'Low','None'):
       elbowStrength = 'Good'
  elif ((output_value >= 8 and output_value <= 12)) and painlevel in ('Severe'):
        elbowStrength = 'Average'
  else:
       elbowStrength = 'Good'

#    print(simulation.print_state())
#    print("Output value",output_value)
#    print("pain Level",painlevel,"elbow Strenght",elbowStrength)
#    print(f"Computed Elbow Health: {simulation.output['Elbow AROM Assessment']:.2f}")

  st.write(simulation.print_state())
  st.write("Output value",output_value)
  st.write("pain Level",painlevel,"elbow Strenght",elbowStrength)
  st.write(f"Computed Elbow Health: {simulation.output['Elbow AROM Assessment']:.2f}")

  # Plotting with Matplotlib
  plt.figure(figsize=(6, 4))
  plt.plot(elbowHealth.universe,  elbowHealth['Very Limited'].mf, label='Elbow AROM Low')
  plt.plot(elbowHealth.universe,  elbowHealth['Limited'].mf, label='Elbow AROM Average')
  plt.plot(elbowHealth.universe,  elbowHealth['Normal'].mf, label='Elbow AROM Good')
  plt.axvline(x=output_value, color='red', linestyle='--', label=f'Output: {output_value:.2f}')
  plt.title('Fuzzy Elbow AROM Assessement')
  plt.xlabel('AROM Value')
  plt.ylabel('Membership Degree')
  plt.legend()

  # Save plot to static folder
  plot_path = os.path.join('static', 'tip_plot.png')
  plt.savefig(plot_path)

  st.pyplot(plt)


    plt.figure(figsize=(3, 3))
    plt.tick_params(axis="both",labelsize=7)
    plt.gca().yaxis.set_major_locator(MultipleLocator(0.2))  # Set x-axis ticks every 0.5
    #plt.gca().yaxis.set_major_locator(MultipleLocator(5))  # Set y-axis ticks every 5
    plt.plot(flexion.universe,  flexion['Hypomobility'].mf, label='Flexion Hypomobility')
    plt.plot(flexion.universe,  flexion['Normal'].mf, label='Flexion Normal')
    plt.plot(flexion.universe,  flexion['Hypermobility'].mf, label='Flexion Hypermobility')
    plt.axvline(x=flexionVal, color='red', linestyle='--', label=f'Input: {flexionVal:.2f}')
    plt.title('Elbow Flexion', fontsize=7)
    plt.xlabel('Flexion ROM', fontsize=7)
    plt.ylabel('Membership Degree', fontsize=7)
    plt.legend(fontsize=7)

    # Save plot to static folder
    plot_path = os.path.join('static', 'flexion.png')
    plt.savefig(plot_path)

    st.pyplot(plt)


    plt.figure(figsize=(3, 3))
    plt.tick_params(axis="both",labelsize=7)
    plt.gca().yaxis.set_major_locator(MultipleLocator(0.2))  # Set x-axis ticks every 0.5
    #plt.gca().yaxis.set_major_locator(MultipleLocator(5))  # Set y-axis ticks every 5
    plt.plot(extension.universe,  extension['Hypomobility'].mf, label='Extension Hypomobility')
    plt.plot(extension.universe,  extension['Normal'].mf, label='Extension Normal')
    plt.plot(extension.universe,  extension['Hypermobility'].mf, label='Extension Hypermobility')
    plt.axvline(x=extensionVal, color='red', linestyle='--', label=f'Input: {extensionVal:.2f}')
    plt.title('Elbow Extension', fontsize=7)
    plt.xlabel('Extension ROM', fontsize=7)
    plt.ylabel('Membership Degree', fontsize=7)
    plt.legend(fontsize=7)

    # Save plot to static folder
    plot_path = os.path.join('static', 'extension.png')
    plt.savefig(plot_path)

    st.pyplot(plt)

    plt.figure(figsize=(3, 3))
    plt.tick_params(axis="both",labelsize=7)
    plt.gca().yaxis.set_major_locator(MultipleLocator(0.2))  # Set x-axis ticks every 0.5
    #plt.gca().yaxis.set_major_locator(MultipleLocator(5))  # Set y-axis ticks every 5
    plt.plot(pronation.universe,  pronation['Hypomobility'].mf, label='Pronation Hypomobility')
    plt.plot(pronation.universe,  pronation['Normal'].mf, label='Pronation Normal')
    plt.plot(pronation.universe,  pronation['Hypermobility'].mf, label='Pronation Hypermobility')
    plt.axvline(x=pronationVal, color='red', linestyle='--', label=f'Input: {pronationVal:.2f}')
    plt.title('Elbow Pronation', fontsize=7)
    plt.xlabel('Pronation ROM', fontsize=7)
    plt.ylabel('Membership Degree', fontsize=7)
    plt.legend(fontsize=7)

    # Save plot to static folder
    plot_path = os.path.join('static', 'pronation.png')
    plt.savefig(plot_path)

    st.pyplot(plt)


    plt.figure(figsize=(3, 3))
    plt.tick_params(axis="both", labelsize=7)
    plt.gca().yaxis.set_major_locator(MultipleLocator(0.2))  # Set x-axis ticks every 0.5
    # plt.gca().yaxis.set_major_locator(MultipleLocator(5))  # Set y-axis ticks every 5
    plt.plot(supination.universe, supination['Hypomobility'].mf, label='Supination Hypomobility')
    plt.plot(supination.universe, supination['Normal'].mf, label='Supination Normal')
    plt.plot(supination.universe, supination['Hypermobility'].mf, label='Supination Hypermobility')
    plt.axvline(x=supinationVal, color='red', linestyle='--', label=f'Input: {supinationVal:.2f}')
    plt.title('Elbow Supination', fontsize=7)
    plt.xlabel('Supination ROM', fontsize=7)
    plt.ylabel('Membership Degree', fontsize=7)
    plt.legend(fontsize=7)

    # Save plot to static folder
    plot_path = os.path.join('static', 'supination.png')
    plt.savefig(plot_path)

    st.pyplot(plt)


    plt.figure(figsize=(3, 3))
    plt.tick_params(axis="both", labelsize=7)
    plt.gca().yaxis.set_major_locator(MultipleLocator(0.2))  # Set x-axis ticks every 0.5
    # plt.gca().yaxis.set_major_locator(MultipleLocator(5))  # Set y-axis ticks every 5
    plt.plot(wextension.universe, wextension['Hypomobility'].mf, label='Wrist Extension Hypomobility')
    plt.plot(wextension.universe, wextension['Normal'].mf, label='Wrist Extension Normal')
    plt.plot(wextension.universe, wextension['Hypermobility'].mf, label='Wrist Extension Hypermobility')
    plt.axvline(x=wextensionVal, color='red', linestyle='--', label=f'Input: {wextensionVal:.2f}')
    plt.title('Wrist Extension', fontsize=7)
    plt.xlabel('Wrist Extension ROM', fontsize=7)
    plt.ylabel('Membership Degree', fontsize=7)
    plt.legend(fontsize=7)

    # Save plot to static folder
    plot_path = os.path.join('static', 'wextension.png')
    plt.savefig(plot_path)

    st.pyplot(plt)

    plt.close()

    # ax0.plot(flexion.universe, fHypomobility, 'b', linewidth=1.5, label='Hypomobility')
    # ax0.plot(flexion.universe, fNormal, 'g', linewidth=1.5, label='Normal')
    # ax0.plot(flexion.universe, fHypermobility, 'r', linewidth=1.5, label='Hypermobility')
    # ax0.set_title('Elbow Flexion')
    # ax0.legend()

    #return render_template('response.html', output=output_value,
    #                       plot_url=url_for('static', filename='tip_plot.png'),
    #                       plot_flexionurl=url_for('static', filename='flexion.png'),
    #                       plot_extensionurl=url_for('static', filename='extension.png'),
    #                       plot_pronationurl = url_for('static', filename='pronation.png'),
    #                       plot_supinationurl = url_for('static', filename='supination.png'),
    #                       plot_wextensionurl=url_for('static', filename='wextension.png'),
    #                       elbowStrength=elbowStrength
    #                       )
    #return render_template('response.html', output=output_value)
#if __name__ == '__main__':
#    app.run(debug=True)
